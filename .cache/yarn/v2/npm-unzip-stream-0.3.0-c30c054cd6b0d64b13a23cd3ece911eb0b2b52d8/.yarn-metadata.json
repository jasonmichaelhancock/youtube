{
  "manifest": {
    "name": "unzip-stream",
    "version": "0.3.0",
    "description": "Process zip files using streaming API",
    "author": {
      "name": "Michal Hruby",
      "email": "michal.mhr@gmail.com"
    },
    "maintainers": [
      {
        "name": "Michal Hruby",
        "email": "michal.mhr@gmail.com"
      }
    ],
    "repository": {
      "type": "git",
      "url": "https://github.com/mhr3/unzip-stream.git"
    },
    "license": "MIT",
    "dependencies": {
      "binary": "^0.3.0",
      "mkdirp": "^0.5.1"
    },
    "devDependencies": {
      "dirdiff": ">= 0.0.1 < 1",
      "stream-buffers": ">= 0.2.5 < 1",
      "tap": "^11.0.1",
      "temp": ">= 0.4.0 < 1"
    },
    "keywords": [
      "zip",
      "unzip",
      "zlib",
      "uncompress",
      "archive",
      "stream",
      "extract"
    ],
    "main": "unzip.js",
    "scripts": {
      "test": "tap ./test/*.js",
      "coverage": "tap ./test/*.js --cov --coverage-report=html"
    },
    "_registry": "npm",
    "_loc": "/home/vagrant/.cache/yarn/v2/npm-unzip-stream-0.3.0-c30c054cd6b0d64b13a23cd3ece911eb0b2b52d8/package.json",
    "readmeFilename": "README.md",
    "readme": "# unzip-stream\n\nStreaming cross-platform unzip tool written in node.js.\n\nThis package is based on [unzip](https://github.com/EvanOxfeld/node-unzip) (and its fork [unzipper](https://github.com/ZJONSSON/node-unzipper)) and provides simple APIs for parsing and extracting zip files. It uses new streaming engine which allows it to process also files which would fail with unzip.\nThere are no added compiled dependencies - inflation is handled by node.js's built in zlib support.\n\nPlease note that the zip file format isn't really meant to be processed by streaming, though this library should succeed in most cases, if you do have complete zip file available, you should consider using other libraries which read zip files from the end - as originally intended (for example [yauzl](https://github.com/thejoshwolfe/yauzl) or [decompress-zip](https://github.com/bower/decompress-zip)).\n\n## Installation\n\n```bash\n$ npm install unzip-stream\n```\n\n## Quick Examples\n\n### Parse zip file contents\n\nProcess each zip file entry or pipe entries to another stream.\n\n__Important__: If you do not intend to consume an entry stream's raw data, call autodrain() to dispose of the entry's\ncontents. Otherwise the stream will get stuck.\n\n```javascript\nfs.createReadStream('path/to/archive.zip')\n  .pipe(unzip.Parse())\n  .on('entry', function (entry) {\n    var filePath = entry.path;\n    var type = entry.type; // 'Directory' or 'File'\n    var size = entry.size; // might be undefined in some archives\n    if (filePath === \"this IS the file I'm looking for\") {\n      entry.pipe(fs.createWriteStream('output/path'));\n    } else {\n      entry.autodrain();\n    }\n  });\n```\n\n### Parse zip by piping entries downstream\n\nIf you `pipe` from unzip-stream the downstream components will receive each `entry` for further processing.   This allows for clean pipelines transforming zipfiles into unzipped data.\n\nExample using `stream.Transform`:\n\n```js\nfs.createReadStream('path/to/archive.zip')\n  .pipe(unzipper.Parse())\n  .pipe(stream.Transform({\n    objectMode: true,\n    transform: function(entry,e,cb) {\n      var filePath = entry.path;\n      var type = entry.type; // 'Directory' or 'File'\n      var size = entry.size;\n      if (filePath === \"this IS the file I'm looking for\") {\n        entry.pipe(fs.createWriteStream('output/path'))\n          .on('finish',cb);\n      } else {\n        entry.autodrain();\n        cb();\n      }\n    }\n  }\n  }));\n```\n\n### Extract to a directory\n```javascript\nfs.createReadStream('path/to/archive.zip').pipe(unzip.Extract({ path: 'output/path' }));\n```\n\nExtract will emit the 'close' event when the archive is fully extracted, do NOT use the 'finish' event, which can be emitted before the writing finishes.\n\n### Extra options\nThe `Parse` and `Extract` methods allow passing an object with `decodeString` property which will be used to decode non-utf8 file names in the archive. If not specified a fallback will be used.\n```javascript\nlet parser = unzip.Parse({ decodeString: (buffer) => { return iconvLite.decode(buffer, 'iso-8859-2'); } });\ninput.pipe(parser).pipe(...);\n```\n\n### What's missing?\n\nCurrently ZIP files up to version 4.5 are supported (which includes Zip64 support - archives with 4GB+ files). There's no support for encrypted (password protected) zips, or symlinks.\n",
    "licenseText": "Copyright (c) 2017 Michal Hruby\nCopyright (c) 2012 - 2013 Near Infinity Corporation\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/unzip-stream/-/unzip-stream-0.3.0.tgz#c30c054cd6b0d64b13a23cd3ece911eb0b2b52d8",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/unzip-stream/-/unzip-stream-0.3.0.tgz",
    "hash": "c30c054cd6b0d64b13a23cd3ece911eb0b2b52d8",
    "registry": "npm",
    "packageName": "unzip-stream"
  },
  "registry": "npm",
  "hash": "c30c054cd6b0d64b13a23cd3ece911eb0b2b52d8"
}