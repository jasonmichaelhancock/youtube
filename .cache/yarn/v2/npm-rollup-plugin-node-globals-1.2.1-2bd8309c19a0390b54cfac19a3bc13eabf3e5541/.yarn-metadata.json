{
  "manifest": {
    "name": "rollup-plugin-node-globals",
    "main": "dist/rollup-plugin-node-globals.cjs.js",
    "jsnext:main": "dist/rollup-plugin-node-globals.es6.js",
    "version": "1.2.1",
    "description": "insert the same globals browserify does",
    "files": [
      "src",
      "dist",
      "README.md"
    ],
    "scripts": {
      "test": "mocha",
      "pretest": "npm run build",
      "build": "rollup -c -f cjs -o dist/rollup-plugin-node-globals.cjs.js && rollup -c -f es -o dist/rollup-plugin-node-globals.es6.js",
      "prebuild": "rimraf dist && mkdirp dist"
    },
    "author": {
      "name": "Calvin Metcalf",
      "email": "calvin.metcalf@gmail.com"
    },
    "license": "MIT",
    "dependencies": {
      "acorn": "^5.5.0",
      "buffer-es6": "^4.9.3",
      "estree-walker": "^0.5.1",
      "magic-string": "^0.22.4",
      "process-es6": "^0.11.6",
      "rollup-pluginutils": "^2.0.1"
    },
    "keywords": [
      "rollup-plugin"
    ],
    "devDependencies": {
      "babel-core": "^6.26.0",
      "babel-preset-es2015-rollup": "^3.0.0",
      "browserify": "^16.1.0",
      "mkdirp": "^0.5.1",
      "mocha": "^5.0.1",
      "rimraf": "^2.6.2",
      "rollup": "^0.56.3",
      "rollup-plugin-babel": "^3.0.3",
      "rollup-plugin-node-resolve": "^3.0.3"
    },
    "repository": {
      "type": "git",
      "url": "git@github.com:calvinmetcalf/rollup-plugin-node-globals.git"
    },
    "_registry": "npm",
    "_loc": "/home/vagrant/.cache/yarn/v2/npm-rollup-plugin-node-globals-1.2.1-2bd8309c19a0390b54cfac19a3bc13eabf3e5541/package.json",
    "readmeFilename": "readme.md",
    "readme": "rollup-plugin-node-globals\n===\n\nPlugin to insert node globals including so code that works with browserify should work even if it uses process or buffers. This is based on [rollup-plugin-inject\n](https://github.com/rollup/rollup-plugin-inject).\n\n- process\n- global\n- Buffer\n- __dirname\n- __filename\n\nPlus `process.nextTick` and `process.browser` are optimized to only pull in\nthemselves and __dirname and __filename point to the file on disk\n\nOnly option beyond the default plugin ones is an optional basedir which is used for resolving __dirname and __filename.\n\n# examples\n\n```js\nvar foo;\nif (process.browser) {\n  foo = 'bar';\n} else {\n  foo = 'baz';\n}\n```\n\nturns into\n\n```js\nimport {browser} from 'path/to/process';\nvar foo;\nif (browser) {\n  foo = 'bar';\n} else {\n  foo = 'baz';\n}\n```\n\nbut with rollup that ends up being\n\n```js\nvar browser = true;\nvar foo;\nif (browser) {\n  foo = 'bar';\n} else {\n  foo = 'baz';\n}\n```\n\nor\n\n```js\nvar timeout;\nif (global.setImmediate) {\n  timeout = global.setImmediate;\n} else {\n  timeout = global.setTimeout;\n}\nexport default timeout;\n```\n\nturns into\n\n```js\nimport {_global} from 'path/to/global.js';\nvar timeout;\nif (_global.setImmediate) {\n  timeout = _global.setImmediate;\n} else {\n  timeout = _global.setTimeout;\n}\nexport default timeout;\n\n```\n\nwhich rollup turns into\n\n```js\nvar _global = typeof global !== \"undefined\" ? global :\n            typeof self !== \"undefined\" ? self :\n            typeof window !== \"undefined\" ? window : {}\n\nvar timeout;\nif (_global.setImmediate) {\n  timeout = _global.setImmediate;\n} else {\n  timeout = _global.setTimeout;\n}\nvar timeout$1 = timeout;\n\nexport default timeout$1;\n```\n\nWith that top piece only showing up once no matter how many times global was used.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/rollup-plugin-node-globals/-/rollup-plugin-node-globals-1.2.1.tgz#2bd8309c19a0390b54cfac19a3bc13eabf3e5541",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/rollup-plugin-node-globals/-/rollup-plugin-node-globals-1.2.1.tgz",
    "hash": "2bd8309c19a0390b54cfac19a3bc13eabf3e5541",
    "registry": "npm",
    "packageName": "rollup-plugin-node-globals"
  },
  "registry": "npm",
  "hash": "2bd8309c19a0390b54cfac19a3bc13eabf3e5541"
}