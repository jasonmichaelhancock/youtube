{
  "manifest": {
    "name": "@webassemblyjs/wasm-edit",
    "version": "1.7.6",
    "description": "> Rewrite a WASM binary",
    "main": "lib/index.js",
    "module": "esm/index.js",
    "scripts": {
      "test": "echo \"Error: no test specified\" && exit 1"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/xtuc/webassemblyjs.git"
    },
    "publishConfig": {
      "access": "public"
    },
    "author": {
      "name": "Sven Sauleau"
    },
    "license": "MIT",
    "dependencies": {
      "@webassemblyjs/ast": "1.7.6",
      "@webassemblyjs/helper-buffer": "1.7.6",
      "@webassemblyjs/helper-wasm-bytecode": "1.7.6",
      "@webassemblyjs/helper-wasm-section": "1.7.6",
      "@webassemblyjs/wasm-gen": "1.7.6",
      "@webassemblyjs/wasm-opt": "1.7.6",
      "@webassemblyjs/wasm-parser": "1.7.6",
      "@webassemblyjs/wast-printer": "1.7.6"
    },
    "devDependencies": {
      "@webassemblyjs/helper-test-framework": "1.7.6"
    },
    "_registry": "npm",
    "_loc": "/home/vagrant/.cache/yarn/v2/npm-@webassemblyjs/wasm-edit-1.7.6-fa41929160cd7d676d4c28ecef420eed5b3733c5/package.json",
    "readmeFilename": "README.md",
    "readme": "# @webassemblyjs/wasm-edit\n\n> Rewrite a WASM binary\n\nReplace in-place an AST node in the binary.\n\n## Installation\n\n```sh\nyarn add @webassemblyjs/wasm-edit\n```\n\n## Usage\n\nUpdate:\n\n```js\nimport { edit } from \"@webassemblyjs/wasm-edit\";\n\nconst binary = [/*...*/];\n\nconst visitors = {\n  ModuleImport({ node }) {\n    node.module = \"foo\";\n    node.name = \"bar\";\n  }\n};\n\nconst newBinary = edit(binary, visitors);\n```\n\nReplace:\n\n```js\nimport { edit } from \"@webassemblyjs/wasm-edit\";\n\nconst binary = [/*...*/];\n\nconst visitors = {\n  Instr(path) {\n    const newNode = t.callInstruction(t.indexLiteral(0));\n    path.replaceWith(newNode);\n  }\n};\n\nconst newBinary = edit(binary, visitors);\n```\n\nRemove:\n\n```js\nimport { edit } from \"@webassemblyjs/wasm-edit\";\n\nconst binary = [/*...*/];\n\nconst visitors = {\n  ModuleExport({ node }) {\n    path.remove()\n  }\n};\n\nconst newBinary = edit(binary, visitors);\n```\n\nInsert:\n\n```js\nimport { add } from \"@webassemblyjs/wasm-edit\";\n\nconst binary = [/*...*/];\n\nconst newBinary = add(actualBinary, [\n  t.moduleImport(\"env\", \"mem\", t.memory(t.limit(1)))\n]);\n```\n\n## Providing the AST\n\nProviding an AST allows you to handle the decoding yourself, here is the API:\n\n```js\naddWithAST(Program, ArrayBuffer, Array<Node>): ArrayBuffer;\neditWithAST(Program, ArrayBuffer, visitors): ArrayBuffer;\n```\n\nNote that the AST will be updated in-place.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/@webassemblyjs/wasm-edit/-/wasm-edit-1.7.6.tgz#fa41929160cd7d676d4c28ecef420eed5b3733c5",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/@webassemblyjs/wasm-edit/-/wasm-edit-1.7.6.tgz",
    "hash": "fa41929160cd7d676d4c28ecef420eed5b3733c5",
    "registry": "npm",
    "packageName": "@webassemblyjs/wasm-edit"
  },
  "registry": "npm",
  "hash": "fa41929160cd7d676d4c28ecef420eed5b3733c5"
}