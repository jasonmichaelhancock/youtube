{
  "manifest": {
    "name": "post-robot",
    "version": "8.0.29",
    "description": "Simple postMessage based server.",
    "main": "index.js",
    "scripts": {
      "setup": "npm install && npm run flow-typed",
      "lint": "eslint src/ test/ *.js",
      "flow-typed": "rm -rf flow-typed && flow-typed install",
      "flow": "flow",
      "flow:build": "flow gen-flow-files ./src/index.js --out-dir ./dist/module",
      "karma": "cross-env NODE_ENV=test babel-node --plugins=transform-es2015-modules-commonjs ./node_modules/.bin/karma start",
      "babel": "babel src/ --out-dir dist/module",
      "webpack": "babel-node --plugins=transform-es2015-modules-commonjs ./node_modules/.bin/webpack --progress",
      "test": "npm run lint && npm run flow-typed && npm run flow && npm run karma",
      "build": "npm run test && npm run babel && npm run webpack",
      "release": "./publish.sh",
      "release:patch": "./publish.sh patch",
      "release:minor": "./publish.sh minor",
      "release:major": "./publish.sh major",
      "clean": "rimraf dist coverage",
      "reinstall": "rimraf flow-typed && rimraf node_modules && npm install && flow-typed install",
      "debug": "cross-env NODE_ENV=debug"
    },
    "repository": {
      "type": "git",
      "url": "git://github.com/krakenjs/post-robot.git"
    },
    "keywords": [
      "cross-domain",
      "cross domain",
      "xdm",
      "iframe",
      "postmessage",
      "krakenjs",
      "kraken"
    ],
    "licenses": [
      {
        "type": "Apache 2.0",
        "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
      }
    ],
    "files": [
      "dist/",
      "src/",
      "globals.js"
    ],
    "readmeFilename": "README.md",
    "devDependencies": {
      "flow-bin": "^0.76",
      "grumbler-scripts": "^2.0.18",
      "mocha": "^4"
    },
    "dependencies": {
      "cross-domain-safe-weakmap": "^1.0.1",
      "cross-domain-utils": "^2.0.0",
      "zalgo-promise": "^1.0.3"
    },
    "_registry": "npm",
    "_loc": "/home/vagrant/.cache/yarn/v2/npm-post-robot-8.0.29-015847b2182e68cac56744519179410ec001004f/package.json",
    "readme": "# post-robot [:]-\\\\-<\n\nCross domain post-messaging on the client side, using a simple listener/client pattern.\n\nSend a message to another window, and:\n\n- [Get a response](#simple-listener-and-sender-with-error-handling) from the window you messaged\n- [Pass functions](#functions) to another window, across different domains\n- [Handle any errors](#simple-listener-and-sender-with-error-handling) that prevented your message from getting through\n- Don't worry about serializing your messages; [just send javascript objects](#simple-listener-and-sender-with-error-handling)\n- Use [promises](#listener-with-promise-response), [callbacks](#listener-with-callback-response) or [async/await](#async--await) to wait for responses from windows you message\n- Set up a [secure message channel](#secure-message-channel) between two windows on a certain domain\n- Send messages between a [parent and a popup window](#parent-to-popup-messaging) in IE\n\n## Serialization\n\npost-robot will serialize and deserialize the following data types in messages:\n\n- Objects, arrays, strings, numbers, booleans, null\n  - Note: this includes any JSON-serializable types\n- Functions\n  - Note: the function passed will be a [reference to the original function](#functions), and the deserialized function will always return a `Promise` - specifically a [`ZalgoPromise`](https://github.com/krakenjs/zalgo-promise)\n- Promises\n  - Note: deserialized promises will be instances of [`ZalgoPromise`](https://github.com/krakenjs/zalgo-promise)\n- Error objects\n  - e.g. `new Error(\"This error will self-destruct in 10, 9, 8...\")`\n- Regex objects\n  - e.g. `/[a-zA-Z0-9]*/`\n\n## Simple listener and sender\n\n```javascript\n// Set up a listener\n\npostRobot.on('getUser', function(event) {\n\n    // Have it return some data to the calling window\n\n    return {\n        id:   1234,\n        name: 'Zippy the Pinhead',\n\n        // Yep, we're even returning a function to the other window!\n\n        logout: function() {\n            return $currentUser.logout();\n        }\n    };\n});\n```\n\n```javascript\n// Call the listener, on a different window, on a different domain\n\npostRobot.send(someWindow, 'getUser', { id: 1337 }).then(function(event) {\n    var user = event.data;\n\n    console.log(event.source, event.origin, 'Got user:', user);\n\n    // Call the user.logout function from the other window!\n\n    user.logout();\n\n}).catch(function(err) {\n\n    // Handle any errors that stopped our call from going through\n\n    console.error(err);\n});\n```\n\n## Listener with promise response\n\n```javascript\npostRobot.on('getUser', function(event) {\n\n    return getUser(event.data.id).then(function(user) {\n        return {\n            name: user.name\n        };\n    });\n});\n```\n\n## Listener with callback response\n\n```javascript\npostRobot.on('getUser', { id: 1337 }, function(event, callback) {\n\n    setTimeout(function() {\n        callback(null, {\n            id:   event.data.id,\n            name: 'Captain Pugwash'\n        });\n    }, 500);\n});\n```\n\n## One-off listener\n\n```javascript\npostRobot.once('init', function(event) {\n\n    return {\n        name: 'Noggin the Nog'\n    };\n});\n```\n\n## Cancelling a listener\n\n```javascript\nvar listener = postRobot.on('getUser', function(event) {\n    return {\n        id:   event.data.id,\n        name: 'Zippy the Pinhead'\n    };\n});\n\nlistener.cancel();\n```\n\n## Listen for messages from a specific window\n\n```javascript\npostRobot.on('init', { window: window.parent }, function(event) {\n\n    return {\n        name: 'Guybrush Threepwood'\n    };\n});\n```\n\n## Listen for messages from a specific domain\n\n```javascript\npostRobot.on('init', { domain: 'http://zombo.com' }, function(event) {\n\n    return {\n        name: 'Manny Calavera'\n    };\n});\n```\n\n## Set a timeout for a response\n\n```javascript\npostRobot.send(someWindow, 'getUser', { id: 1337 }, { timeout: 5000 }).then(function(event) {\n    console.log(event.source, event.origin, 'Got user:', event.data.name);\n\n}).catch(function(err) {\n    console.error(err);\n});\n```\n\n## Send a message to a specific domain\n\n```javascript\npostRobot.send(someWindow, 'getUser', { id: 1337 }, { domain: 'http://zombo.com' }).then(function(event) {\n    console.log(event.source, event.origin, 'Got user:', event.data.name);\n});\n```\n\n## Send a message to the direct parent\n\n```javascript\npostRobot.sendToParent('getUser').then(function(event) {\n    console.log(event.data);\n});\n```\n\n## Async / Await\n\n```javascript\npostRobot.on('getUser', async ({ source, origin, data }) => {\n\n    let user = await getUser(data.id);\n\n    return {\n        id:   data.id,\n        name: user.name\n    };\n});\n```\n\n```javascript\ntry {\n    let { source, origin, data } = await postRobot.send(someWindow, `getUser`, { id: 1337 });\n    console.log(source, origin, 'Got user:', data.name);\n\n} catch (err) {\n    console.error(err);\n}\n```\n\n## Secure Message Channel\n\nFor security reasons, it is recommended that you always explicitly specify the window and domain you want to listen\nto and send messages to. This creates a secure message channel that only works between two windows on the specified domain:\n\n```javascript\npostRobot.on('getUser', { window: childWindow, domain: 'http://zombo.com' }, function(event) {\n    return {\n        id:   event.data.id,\n        name: 'Frodo'\n    };\n});\n```\n\n```javascript\npostRobot.send(someWindow, 'getUser', { id: 1337 }, { domain: 'http://zombo.com' }).then(function(event) {\n    console.log(event.source, event.origin, 'Got user:', event.data.name);\n\n}).catch(function(err) {\n    console.error(err);\n});\n```\n\nYou can even set up a listener and sender instance in advance:\n\n```javascript\nvar listener = postRobot.listener({ window: childWindow, domain: 'http://zombo.com' });\n\nlistener.on('getUser', function(event) {\n    return {\n        id:   event.data.id,\n        name: 'Frodo'\n    };\n});\n```\n\n```javascript\nvar client = postRobot.client({ window: someWindow, domain: 'http://zombo.com' });\n\nclient.send('getUser', { id: 1337 }).then(function(event) {\n    console.log(event.source, event.origin, 'Got user:', event.data.name);\n\n}).catch(function(err) {\n    console.error(err);\n});\n```\n\n## Functions\n\nPost robot lets you send across functions in your data payload, fairly seamlessly.\n\nFor example:\n\n```javascript\npostRobot.on('getUser', function(event) {\n    return {\n        id:     event.data.id,\n        name:   'Nogbad the Bad',\n\n        logout: function() {\n            currentUser.logout();\n        }\n    };\n});\n```\n\n```javascript\npostRobot.send(myWindow, 'getUser', { id: 1337 }).then(function(event) {\n    var user = event.data;\n\n    user.logout().then(function() {\n        console.log('User was logged out');\n    });\n});\n```\n\nThe function `user.logout()` will be called on the **original** window. Post Robot transparently messages back to the\noriginal window, calls the function that was passed, then messages back with the result of the function.\n\nBecause this uses post-messaging behind the scenes and is therefore always async, `user.logout()` will **always** return a promise, and must be `.then`'d or `await`ed.\n\n\n## Parent to popup messaging\n\nUnfortunately, IE blocks direct post messaging between a parent window and a popup, on different domains.\n\nIn order to use post-robot in IE9+ with popup windows, you will need to set up an invisible 'bridge' iframe on your parent page:\n\n```\n   [ Parent page ]\n\n+---------------------+          [ Popup ]\n|        xx.com       |\n|                     |      +--------------+\n|  +---------------+  |      |    yy.com    |\n|  |    [iframe]   |  |      |              |\n|  |               |  |      |              |\n|  | yy.com/bridge |  |      |              |\n|  |               |  |      |              |\n|  |               |  |      |              |\n|  |               |  |      |              |\n|  |               |  |      +--------------+\n|  +---------------+  |\n|                     |\n+---------------------+\n```\n\n\na. Use the special `ie` build of post-robot: `dist/post-robot.ie.js`.\n\nb. Create a bridge path on the domain of your popup, for example `http://yy.com/bridge.html`, and include post-robot:\n\n```html\n<script src=\"http://yy.com/js/post-robot.ie.js\"></script>\n```\n\nc. In the parent page on `xx.com` which opens the popup, include the following javascript:\n\n```html\n<script>\n    postRobot.bridge.openBridge('http://yy.com/bridge.html');\n</script>\n```\n\nNow `xx.com` and `yy.com` can communicate freely using post-robot, in IE.\n",
    "licenseText": "/*───────────────────────────────────────────────────────────────────────────*\\\n│  Copyright (C) 2016 PayPal                                                  │\n│                                                                             │\n│                                                                             │\n│   Licensed under the Apache License, Version 2.0 (the \"License\"); you may   │\n│   not use this file except in compliance with the License. You may obtain   │\n│   a copy of the License at http://www.apache.org/licenses/LICENSE-2.0       │\n│                                                                             │\n│   Unless required by applicable law or agreed to in writing, software       │\n│   distributed under the License is distributed on an \"AS IS\" BASIS,         │\n│   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  │\n│   See the License for the specific language governing permissions and       │\n│   limitations under the License.                                            │\n\\*───────────────────────────────────────────────────────────────────────────*/\n",
    "license": "Apache-2.0"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/post-robot/-/post-robot-8.0.29.tgz#015847b2182e68cac56744519179410ec001004f",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/post-robot/-/post-robot-8.0.29.tgz",
    "hash": "015847b2182e68cac56744519179410ec001004f",
    "registry": "npm",
    "packageName": "post-robot"
  },
  "registry": "npm",
  "hash": "015847b2182e68cac56744519179410ec001004f"
}